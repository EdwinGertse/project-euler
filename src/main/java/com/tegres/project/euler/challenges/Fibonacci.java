package com.tegres.project.euler.challenges;

import com.tegres.project.euler.exception.ExceedMaxNumberException;

import java.util.ArrayList;
import java.util.List;

/**
 *Even Fibonacci numbers
 *
 * Problem 2
 * Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
 *
 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 *
 * By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
 *
 * @author Edwin Gertse
 */
public class Fibonacci {
    private static final Integer MAX_NUMBER = 4000000;
    /**
     * fn = fn(n-1) + fn(n-2)
     * @param number given number
     * @return Fibonacci result
     */
    public int fibonacciSequence(int number) {
        if(number == 0 || number == 1)
            return 1;
        return fibonacciSequence(number - 1) + fibonacciSequence(number - 2);
    }

    /**
     * Verify if given number is an even number
     * @param number number
     * @return true if result is even
     */
    private static boolean isEven(Integer number) {
        return Math.floorMod(number, 2) == 0;
    }

    public Integer sumOfEvenNumbers(Integer number) {
        if (number > MAX_NUMBER)
            throw new ExceedMaxNumberException("Fibonacci sequence exceed maximum number");

        List<Integer> multiples = new ArrayList<>();
        for(int i = 0; i < number; i++)
            multiples.add(fibonacciSequence(i));

        return multiples.stream().filter(Fibonacci::isEven).mapToInt(Integer::intValue).sum();
    }
}
